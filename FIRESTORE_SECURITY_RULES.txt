// Firestore Security Rules for Richmond Tutorial Hub
// Copy these rules to your Firebase console -> Firestore Database -> Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================
    // CONTACT SUBMISSIONS
    // ============================
    // Allow anyone to create contact submissions (no auth required)
    match /contact_submissions/{documentId} {
      allow create: if true; // Allow anonymous contact form submissions
      allow read, update, delete: if request.auth != null && 
        resource.data.keys().hasAll(['submittedAt', 'status']) &&
        (request.auth.token.role == 'admin' || request.auth.token.role == 'teacher');
    }
    
    // ============================
    // TEST COLLECTION (for debugging)
    // ============================
    match /test_collection/{documentId} {
      allow read, write: if true; // Allow all operations for testing
    }
    
    // ============================
    // TUTORIAL BOOKINGS
    // ============================
    match /tutorial_bookings/{documentId} {
      // Allow anyone to create bookings (students may not be authenticated)
      allow create: if true;
      
      // Allow authenticated users to read their own bookings
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.token.role == 'admin' || 
         request.auth.token.role == 'teacher');
         
      // Only admins and teachers can update/delete bookings
      allow update, delete: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'teacher');
    }
    
    // ============================
    // USER PROFILES
    // ============================
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Admins can read all user profiles
      allow read: if request.auth != null && request.auth.token.role == 'admin';
    }
    
    // ============================
    // COMMUNITY QUESTIONS
    // ============================
    match /questions/{questionId} {
      // Authenticated users can create questions
      allow create: if request.auth != null;
      
      // Anyone can read questions (public community)
      allow read: if true;
      
      // Users can update their own questions, teachers/admins can update any
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || 
         request.auth.token.role == 'teacher' || 
         request.auth.token.role == 'admin');
         
      // Only admins can delete questions
      allow delete: if request.auth != null && request.auth.token.role == 'admin';
    }
    
    // ============================
    // LESSONS & CONTENT
    // ============================
    match /lessons/{lessonId} {
      // Anyone can read lessons (public content)
      allow read: if true;
      
      // Only teachers and admins can create/update/delete lessons
      allow write: if request.auth != null && 
        (request.auth.token.role == 'teacher' || request.auth.token.role == 'admin');
    }
    
    // ============================
    // ADMIN ANALYTICS & LOGS
    // ============================
    match /analytics/{documentId} {
      allow read, write: if request.auth != null && request.auth.token.role == 'admin';
    }
    
    match /admin_logs/{documentId} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'teacher');
    }
    
    // ============================
    // DEFAULT DENY ALL
    // ============================
    // Deny access to any other collections not explicitly defined above
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/*
SETUP INSTRUCTIONS:

1. Go to Firebase Console -> Firestore Database -> Rules
2. Replace the existing rules with the rules above
3. Click "Publish" to apply the changes

KEY FEATURES:
- ✅ Contact forms work without authentication
- ✅ Booking system works for anonymous users  
- ✅ Public access to lessons and community questions
- ✅ Role-based access control for admin functions
- ✅ Users can manage their own data
- ✅ Comprehensive security for all collections

TESTING:
- Contact form submissions should work immediately
- Booking submissions should work for all users
- Admin panel requires teacher/admin role
- Community features require authentication

If you're still getting permission errors after applying these rules:
1. Wait 1-2 minutes for rules to propagate
2. Check the Firebase Console -> Firestore -> Usage tab for any errors
3. Use the browser console debug functions to test specific operations
*/
